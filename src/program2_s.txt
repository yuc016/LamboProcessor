    MOV r1, #0                      // r1: msgPt = 0
    MOV r3, #128                    // r3: lfsr_ptrnPt

    // Load each pattern
    MOV r4, #96 //0x60
    STR r4, [r3]
    INC r3
    MOV r4, #72 //0x48
    STR r4, [r3]
    INC r3
    MOV r4, #120 //0x78
    STR r4, [r3]
    INC r3
    MOV r4, #114  //0x72
    STR r4, [r3]
    INC r3
    MOV r4, #106 //0x6A
    STR r4, [r3]
    INC r3
    MOV r4, #105 //0x69
    STR r4, [r3]
    INC r3
    MOV r4, #92 //0x5C
    STR r4, [r3]
    INC r3
    MOV r4, #126 //0x7E
    STR r4, [r3]
    INC r3
    MOV r4, #123 //0x7B
    STR r4, [r3]
    INC r3 //TODO: REMOVE
    
    MOV r3, #128                    // r3: lfsr_ptrnPt
    MOV r4, #1

  find_pattern:                     // |-----------LOOP find_pattern------------|
    MOV r2, #64                     // encPt = 64
    LDR r8, [r2]                    // rLFSR = start_state = data[encPt++]
    INC r2

    MOV r5, #9                      // r4: numShift = 9
    LDR r7, [r3]                    // rTAP = data[lfsr_ptrnPt]
    INC r3

    B verify_pattern
  y:
    B find_pattern                  // back to find_pattern

  verify_pattern:                   // |---------LOOP verify_pattern---------|          
    SHIFT
    LDR r6, [r2]                    // r6 = data[encPt++]
    INC r2

    MOV r4, #127
    CMP r4, r6
    BGE z
    INC r4
    SUB r6, r4
    B z
  h:
    B y                             // back to find_pattern
  x:
    B verify_pattern                // back to verify_pattern

  z:
    SUB r6, r8
    CMP r6, r1
    BGE c
    B f                             // pattern match failed, break
  c:
    CMP r1, r6
    BGE d
    B f                             // pattern match failed, break

  e:
    B h                             // back to find_pattern

  d:
    MOV r4, #1
    SUB r5, r4
    CMP r5, r4                      // while numShift >= 1
    BGE x                           // |---------LOOP verify_pattern---------|

    B j                             // pattern match, break

  f:
    MOV r6, #136                   
    CMP r6, r3                      // while 136 >= lfsr_ptrn
    BGE e                           // |-----------LOOP find_pattern------------|

    MOV r1, #127                    // SHOULD NOT GET HERE!!
    MOV r2, #127                    // SHOULD NOT GET HERE!!
    HALT                            // First 10 bytes def have corruption
  
  j:
    MOV r2, #64
    LDR r8, [r2]
    MOV r3, #32
    MOV r4, #127
    
  decrypt:
    LDR r6, [r2]
    INC r2

    SUB r5, r5
    ADD r5, r6
    RDX r5                          // r5 = ^(r6)
    SUB r3, r3
    CMP r3, r5
    BGE no_error:                   // go no_error if r5 is 0

    MOV r6, #128                    // Error char
    B write_mem

  q:
    B decrypt                       // Branch pitstop

  no_error:    
    XOR r6, r8
    MOV r3, #32
    ADD r6, r3                      // byte = enc ^ lfsr + 0x20

    MOV r5, #127
    CMP r5, r6
    BGE write_mem
    INC r5
    SUB r6, r5
    
  write_mem:
    STR r6, [r1]                    // data[msgPt++] = byte
    INC r1

    SHIFT
    CMP r4, r2                      // while encPt <= 127
    BGE q

    HALT